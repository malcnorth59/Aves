Name     Aves_Memory_Decoder;
PartNo   ATF22V10C;
Date     2025;
Revision 1.0;
Designer Malcolm North;
Company  None;
Assembly Aves Computer;
Location None;
Device   g22v10;

/*********************************************************************
 * Aves Video Timing Controller
 * 
 * This PLD provides timing logic for a 6845 CRTC based video system:
 * - 40 x 25 character text display (320 x 300 pixels)
 * - 8 x 12 pixel character cell font
 * - 16 color output capability
 * - 2K x 8 dual port RAM screen buffer
 * - 65C02 CPU interface
 * - Video cursor generation through signal inversion
 *
 * Video Output Specifications:
 * - Based on SVGA timing standards at reduced clock rate
 * - Dot clock: 16 MHz
 * - Horizontal: 40 characters (320 pixels)
 * - Vertical: 25 characters (300 pixels)
 *
 * The device synchronizes 6845 CRTC outputs with the system clocks,
 * generates required timing signals for the dual port RAM access,
 * provides clock management for the video subsystem, and
 * handles cursor display through video signal inversion.
 *
 * ATF22V10C Pinout:
 *                  ___________
 *           chck  | 1       24| VCC
 *           phi2  | 2       23| dvs
 *           clk8  | 3       22| dde
 *             hs  | 4       21| ldcolb
 *             vs  | 5       20| video
 *           crsr  | 6       19| nc
 *             de  | 7       18| cn
 *         dotclk  | 8       17| ldsrb
 *             nc  | 9       16| ldchb
 *             nc  |10       15  dcrsr
 *             nc  |11       14| dhs
 *            GND  |12       13| vidout
 *                 |___________|
 *
 * Dotclock  = 16MHz clock to shift register
 * Clock8    =  8MHz clock from divider
 * Phi2      =  4MHz CPU clock is 4MHz from divider
 * Chck      =  2MHz Chracter clock
 * Ldchb     = Pulse to load character into character latch
 * Ldsrb     = Pulse to load shift register on next clock rising edge
 * ldcolb    = Loads colour latch
 *
 * Video Cursor Generation:
 * - vidout is the raw video input signal
 * - dcrsr is the registered cursor signal
 * - video output is XORed with cursor to create inversion effect
 *
 *********************************************************************/

/* *************** INPUT PINS *********************/
PIN 1  = chck;      /* Counter (74HC163) output QA - character clock */
$define clock /chck /* use character clock falling edge */

PIN 2  = phi2;      /* Counter (74HC163) output QB - system clock phase 2 */
PIN 3  = clk8;      /* Counter (74HC163) output QC */
PIN 4  = hs;        /* 6845 CRTC horizontal sync output */
PIN 5  = vs;        /* 6845 CRTC vertical sync output */
PIN 6  = crsr;      /* 6845 CRTC cursor output */
PIN 7  = de;        /* 6845 CRTC display enable output */
pin 8  = dotclk;    /* Crystal oscillator output - video dot clock */
pin 13 = vidout;    /* Video data input */

/* *************** OUTPUT PINS ********************/
pin 14 = dhs;       /* Registered horizontal sync output */
pin 23 = dvs;       /* Registered vertical sync output */
PIN 15 = dcrsr;     /* Registered cursor output */
PIN 22 = dde;       /* Registered display enable output */
PIN 16 = ldchb;     /* Load character register */
PIN 21 = ldcolb;    /* Inverted system clock phase 2 */
pin 17 = ldrsb;     /* Shift register load signal (active low) */
pin 20 = video;     /* Cursor-modified video output */

/* Synchronize 6845 CRTC outputs with character clock falling edge */
dhs.d = hs;
dvs.d = vs;
dcrsr.d = crsr;
dde.d = de;

/* low going pulse to load character into Latch on rising edge */
ldchb = !(!clk8 & !phi2 & chck);       

/* low enable pulse qualifies sr load operation */
ldsrb = !(!dotclk & !clk8 & !phi2 & !chck)
      # !(dotclk & clk8 & phi2 & chck);

/* low pulse qualifies load colour latch */
ldcolb = !(!dotclk & !clk8 & !phi2 & !chck);

/* Test Vectors for Aves_Memory_Decoder */
TEST_VECTORS
([chck,phi2,clk8,hs,vs,crsr,de,dotclk,vidout] -> [dhs,dvs,dcrsr,dde,ldchb,ldcolb,ldsrb,video])

/* Test 1: Reset/idle state - all inputs low */
[0,0,0,0,0,0,0,0,0] -> [0,0,0,0,1,1,1,0];

/* Test 2: Sync signal registration on clock edge */
[0,0,0,1,1,0,0,0,0] -> [0,0,0,0,1,1,1,0];
[1,0,0,1,1,0,0,0,0] -> [1,1,0,0,1,1,1,0];

/* Test 3: Display enable and cursor registration */
[0,0,0,0,0,1,1,0,0] -> [0,0,0,0,1,1,1,0];
[1,0,0,0,0,1,1,0,0] -> [0,0,1,1,1,1,1,0];

/* Test 4: Character load timing */
[0,0,0,0,0,0,0,0,0] -> [0,0,0,0,1,1,1,0];
[1,0,1,0,0,0,0,0,0] -> [0,0,0,0,0,1,1,0];

/* Test 5: Shift register load timing */
[0,0,0,0,0,0,0,1,0] -> [0,0,0,0,1,1,1,0];
[1,1,1,0,0,0,0,1,0] -> [0,0,0,0,1,1,0,0];

/* Test 6: Color load timing */
[0,0,0,0,0,0,0,0,0] -> [0,0,0,0,1,1,1,0];
[1,0,0,0,0,0,0,1,1] -> [0,0,0,0,1,0,1,1];

/* Test 7: Video cursor XOR operation */
[0,0,0,0,0,0,0,0,1] -> [0,0,0,0,1,1,1,1];
[1,0,0,0,0,1,0,0,1] -> [0,0,1,0,1,1,1,0];
