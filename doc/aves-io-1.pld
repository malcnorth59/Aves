Name     Aves_6502_IO;
PartNo   AV650800-01;
Date     2025;
Revision 01;
Designer Malcolm North;
Company  None;
Assembly None;
Location None;
Device   G22V10;

/* *************** INPUT PINS ********************
 *                 _____   _____
 *                /     \_/     \
 *           vacc | 1         24| VCC
 *           phi2 | 2         23| a6
 *            r_w | 3         22| wait
 *             a8 | 4         21| mcrb
 *             a9 | 5         20| vicb
 *            a10 | 6         19| rdy
 *            a11 | 7         18| dpmb
 *            a12 | 8         17| viab
 *            a13 | 9         16| xiob
 *            a14 |10         15| kbdb
 *            a15 |11         14| a7
 *            GND |12         13| io
 *                \_____________/
 *
 * Note: Pin 24 (VCC) and Pin 12 (GND) are not
 *       declared in pin list
 */

/* Memory Map:
 * 0x0000-0x7FFF | 32K   | Main RAM
 * 0x8000-0x8FFF | 4K    | DPM (when io=1)
 * 0x8000-0xFBFF | 31K   | Banked RAM/ROM (when io=0)
 * 0xFC00-0xFDFF | 512B  | I/O Expansion (when io=1)
 * 0xFE00-0xFEFF | 256B  | Fixed I/O
 *   0xFE00-0xFE3F |  64B  | KBD Interface
 *   0xFE40-0xFE7F |  64B  | VIC
 *   0xFE80-0xFEBF |  64B  | VIA
 *   0xFEC0-0xFEFF |  64B  | MCR
 * 0xFF00-0xFFFF | 256B  | ROM
 */

/* Signal Polarity:
 * Inputs:
 *   vacc  - active high
 *   phi2  - active high
 *   r_w   - low=write
 *   io    - active high
 *   wait  - active high
 * Outputs:
 *   All chip selects (mcrb,vicb,viab,xiob,kbdb) - active low
 *   rdy   - active low
 *   dpmb  - active low
 */

 /* Timing Requirements:
  * The wait signal is generated through an external 4-stage shift register
  * triggered by the rdy signal. For slow device accesses (VIC and I/O 
  * expansion slow page):
  *
  * 1. Initial access triggers rdy low
  * 2. After 4 cycles, wait goes low
  * 3. wait remains low until shift register clears (4 more cycles)
  * 4. Next slow access must not occur until wait returns high
  *
  * WARNING: If a slow access occurs while wait is still low, it will
  * execute as a fast cycle without proper timing. Software must ensure
  * at least 4 cycles of fast access between any two slow accesses.
  * 
  * Example sequence:
  * Cycle 0: Slow access starts (rdy low)
  * Cycle 1-3: Wait states
  * Cycle 4: wait goes low, access completes
  * Cycle 5-8: Must be fast accesses to allow shift register to clear
  * Cycle 9: Next slow access can begin safely
  */
 

/* Pin Declarations - All outputs active low */
Pin 1  = vacc;    /* Video access control (active high) */
Pin 2  = phi2;    /* System clock phase 2 (active high) */
Pin 3  = r_w;     /* Read/Write control (low=write) */
Pin 13 = io;      /* I/O select (active high) */
Pin 22 = wait;   /* Wait state input (active low) */

/* Address bus */
Pin 23 = a6;      /* Address lines 6-15 */
Pin 14 = a7;
Pin 4  = a8;
Pin 5  = a9;
Pin 6  = a10;
Pin 7  = a11;
Pin 8  = a12;
Pin 9  = a13;
Pin 10 = a14;
Pin 11 = a15;

/* Output Pins - All active low */
Pin 21 = mcrb;    /* Memory Control Register select */
Pin 20 = vicb;    /* VIC chip select */
Pin 19 = rdy;     /* Ready signal */
Pin 18 = dpmb;    /* Dual Port Memory select */
Pin 17 = viab;    /* VIA chip select */
Pin 16 = xiob;    /* I/O expansion select */
Pin 15 = kbdb;    /* Keyboard interface select */

/* Address field definition */
Field address = [a15..a6];

/* I/O region definitions */
io_hole_1 = !vacc & a15 & a14 & a13 & a12 & a11 & a10 & a9 & !a8;    /* 0xFE00-0xFEFF */
io_hole_2 = !vacc & io & a15 & a14 & a13 & a12 & a11 & a10 & !a9;    /* 0xFC00-0xFDFF */
dpm_hole  = !vacc & io & a15 & !a14 & !a13 & !a12;                   /* 0x8000-0x8FFF */

/* Output equations */
mcrb  = !(phi2 & io_hole_1 & a7 & a6);        /* 0xFEC0-0xFEFF */
kbdb  = !(phi2 & io_hole_1 & !a7 & !a6);      /* 0xFE00-0xFE3F */
vicb  = !(io_hole_1 & !a7 & a6 & wait);       /* 0xFE40-0xFE7F */
viab  = !(io_hole_1 & a7 & !a6);              /* 0xFE80-0xFEBF */
xiob  = !(io_hole_2 & !a8
      # (a8 & wait));                         /* 0xFC00-0xFDFF */
dpmb  = !dpm_hole;                            /* 0x8000-0x8FFF */
rdy   = !((io_hole_1 & !a7 & a6 wait) #       /* VIC access */
          (io_hole_2 & a8 & wait));           /* Slow I/O page */

/* Test Vectors */
TEST_VECTORS ([vacc phi2 r_w io wait a15 a14 a13 a12 a11 a10 a9 a8 a7 a6] => 
              [mcrb vicb rdy dpmb viab xiob kbdb])

/* Fixed I/O Tests */
[0 1 1 1 1 1 1 1 1 1 1 1 0 0 0] => [1 1 1 1 1 1 0] /* KBD read */
[0 1 0 1 1 1 1 1 1 1 1 1 0 0 0] => [1 1 1 1 1 1 0] /* KBD write */
[0 0 1 1 1 1 1 1 1 1 1 1 0 0 0] => [1 1 1 1 1 1 1] /* KBD phi2=0 */

[0 1 1 1 1 1 1 1 1 1 1 1 0 0 1] => [1 0 0 1 1 1 1] /* VIC read */
[0 1 1 1 0 1 1 1 1 1 1 1 0 0 1] => [1 1 1 1 1 1 1] /* VIC wait=0 */

[0 1 1 1 1 1 1 1 1 1 1 1 0 1 0] => [1 1 1 1 0 1 1] /* VIA access */
[0 1 1 1 1 1 1 1 1 1 1 1 0 1 1] => [0 1 1 1 1 1 1] /* MCR access */

/* Switchable I/O Tests */
[0 1 1 1 1 1 0 0 0 0 0 0 0 0 0] => [1 1 1 0 1 1 1] /* DPM enabled */
[0 1 1 0 1 1 0 0 0 0 0 0 0 0 0] => [1 1 1 1 1 1 1] /* DPM disabled */

[0 1 1 1 1 1 1 1 1 1 1 0 0 0 0] => [1 1 1 1 1 0 1] /* IOX fast page */
[0 1 1 1 1 1 1 1 1 1 1 0 1 0 0] => [1 1 0 1 1 0 1] /* IOX slow page */
[0 1 1 0 1 1 1 1 1 1 1 0 0 0 0] => [1 1 1 1 1 1 1] /* IOX disabled */

/* Control Signal Tests */
[1 1 1 1 1 1 1 1 1 1 1 1 0 0 0] => [1 1 1 1 1 1 1] /* VACC override */
[0 0 1 1 1 1 1 1 1 1 1 1 0 0 1] => [1 1 1 1 1 1 1] /* Clock inactive */
[0 1 1 1 0 1 1 1 1 1 1 0 1 0 0] => [1 1 1 1 1 1 1] /* wait state */

/* Boundary Tests */
[0 1 1 1 1 0 0 0 0 0 0 0 0 0 0] => [1 1 1 1 1 1 1] /* RAM space */
[0 1 1 1 1 1 1 1 1 1 1 1 1 1 1] => [1 1 1 1 1 1 1] /* ROM space */

/* Two consecutive VIC accesses with 4-cycle shift register */
[0 1 1 1 1 1 1 1 1 1 1 1 0 0 1] => [1 0 0 1 1 1 1] /* First VIC access starts */
[0 1 1 1 0 1 1 1 1 1 1 1 0 0 1] => [1 1 1 1 1 1 1] /* wait goes low after 4 cycles */
[0 1 1 1 0 1 1 1 1 1 1 1 0 0 1] => [1 1 1 1 1 1 1] /* Second VIC access - proceeds fast */
[0 1 1 1 0 1 1 1 1 1 1 1 0 0 1] => [1 1 1 1 1 1 1] /* Still proceeds fast */
[0 1 1 1 0 1 1 1 1 1 1 1 0 0 1] => [1 1 1 1 1 1 1] /* Still proceeds fast */
[0 1 1 1 0 1 1 1 1 1 1 1 0 0 1] => [1 1 1 1 1 1 1] /* Last cycle with wait low */

/* After shift register clears */
[0 1 1 1 1 1 1 1 1 1 1 1 0 0 1] => [1 0 0 1 1 1 1] /* New VIC access can now wait */
